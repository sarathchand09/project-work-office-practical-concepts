generic interface encapsulate:

public interface InputValidator<T>{

 boolean validate(T t) throws Exception;

}

public class InputValidatorImpl1 implements  InputValidator<Crusor>{

@override
 boolean validate(Crusor t) throws Exception{
 return t.getState();
 }

}

public class InputValidatorImpl2 implements  InputValidator<Kooklet>{

@override
 boolean validate(Kooklet t) throws Exception{
 return t.getState();
 }
}

generic JAXB Marshaller:

public class JAXBHelper {

public <T> String jaxbObjectToString(T t){
 JAXBContext context = JAXBContext.newInstance(t.getClass());
 Marshaller m = context.createMarshaller();
 StringWriter stringWritter = new StringWriter();
 m.marshall(t, stringWritter);
 return stringWritter.toString();
}

//same for unmarshaller as well

}
